// shape optimization of a membrane - rectangular
// Governing equation:
// div(h*grad(u ))+ f = 0 on domain D
// u = 0 on boundary dD
// Objective function J(h) = int_D fu dx
// Adjoint equation:
// -div(h grad(p)) - f = 0 on D
// p = 0 on dD

real Lx = 1.0;
real Ly = 1.0;

// load is applied at:
real xc = 0.7*Lx;
real yc = 0.5*Ly;
// load(force) given by:
real F = 5.0;
//radius of applied load(disc):
real r = 0.05;

// Build mesh
border a(t=0, Ly){x=0; y=Ly-t; label=1;};
border b(t=0, Lx){x=t; y=0; label=2;};
border c(t=0, Ly){x=Lx; y=t; label=3;};
border d(t=0, Lx){x=Lx-t; y=Ly; label=4;};

int nmesh = 25;  // can't use n_mesh name since FreeFEM foes not like underscores.
mesh Th = buildmesh(a(nmesh) + b(nmesh) + c(nmesh) + d(nmesh));
plot(Th);
//////////////// RUN THE ABOVE CODE TO SEE MESH ////////////////

// define physical variables
/// first make finite-element space
fespace Vh2d(Th, P1); // affine interpolation

//// Dispacement u
Vh2d u;
Vh2d v; // test variables of weak form

//// Adjoint variables 
Vh2d p;
Vh2d q;

//// Thickness h
real h0 = 0.25; //constant thickness to be optimized
Vh2d h = h0; // FreeFEM is designed to case h0 to Vh2d. Can we initialize h0 with Vh2d ?

// define loads: Gaussian distribution centered at (xc, yc)
func f = F*exp(-((x-xc)^2 + (y-yc)^2)/(2.0*r*r));

// Optimization loop- Gradient descent
real dt = 0.01;
int maxiter = 1000;

for (int iter=0; iter < maxiter; iter++){
    //// Solve Primal problem
    solve Membrane(u, v)
        = int2d(Th)(
            h*(dx(u)*dx(v) + dy(u)*dy(v))
        )
        -
        int2d(Th)(
            f*v
        )
        + on(1, u=0)
        + on(2, u=0)
        + on(3, u=0)
        + on(4, u=0)
    ;

    //    plot(u, fill=true, value=false);
    //    savemesh(Th, "membrane.msh"); // saving the mesh 

    //// Solve Adjoint problem
    solve Adjoint(p, q)
        = int2d(Th)(
            h*(dx(p)*dx(q) + dy(p)*dy(q))
        )
        -
        int2d(Th)(
            (-f)*q
        )
        + on(1, p=0)
        + on(2, p=0)
        + on(3, p=0)
        + on(4, p=0)
    ;

    // adjoint solution comes for free because p = - u , because it is like using -F instead of F

    //// step forward - compute Gradient
    Vh2d dJ = -(dx(u)*dx(u) + dy(u)*dy(u)); // since dJ = dx(u)*dx(p) + dy(u)*dy(p); // dJ is norm of grad

    h = h - dt*dJ ; 

    plot(h, fill=1, wait=false, value=true); // to see the update for h in every loop // wait is false so it doesn't pause at every loop; value is for colorbar
}

plot(h, fill=1, wait=true, value=true);
// plot(u, fill=true, value=false); // to plot the force // not needed