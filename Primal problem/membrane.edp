// shape optimization of a membrane - rectangular

real Lx = 1.0;
real Ly = 1.0;

// load is applied at:
real xc = 0.8*Lx;
real yc = 0.5*Ly;
// load(force) given by:
real F = 5.0;
//radius of applied load(disc):
real r = 0.1;

// Build mesh
border a(t=0, Ly){x=0; y=Ly-t; label=1;};
border b(t=0, Lx){x=t; y=0; label=2;};
border c(t=0, Ly){x=Lx; y=t; label=3;};
border d(t=0, Lx){x=Lx-t; y=Ly; label=4;};

int nmesh = 25;  // can't use n_mesh name since FreeFEM foes not like underscores.
mesh Th = buildmesh(a(nmesh) + b(nmesh) + c(nmesh) + d(nmesh));
plot(Th);
//////////////// RUN THE ABOVE CODE TO SEE MESH ////////////////

// define physical variables
/// first make finite-element space
fespace Vh2d(Th, P1); // affine interpolation
//// Dispacement u
Vh2d u;
Vh2d v; // test variables of weak form
//// Thickness h
real h0 = 0.25; //constant thickness to be optimized
Vh2d h = h0; // FreeFEM is designed to case h0 to Vh2d. Can we initialize h0 with Vh2d ?

// define loads: Gaussian distribution centered at (xc, yc)
func f = F*exp(-((x-xc)^2 + (y-yc)^2)/(2.0*r*r));

// Optimization loop- Gradient descent

//// Solve Primal problem
solve Membrane(u, v)
    = int2d(Th)(
        h*(dx(u)*dx(v) + dy(u)*dy(v))
    )
    -
    int2d(Th)(
        f*v
    )
    + on(1, u=0)
    + on(2, u=0)
    + on(3, u=0)
    + on(4, u=0)
;

plot(u, fill=true, value=false);